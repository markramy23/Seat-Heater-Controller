/* Kernel includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "event_groups.h"
#include "semphr.h"
/* MCAL includes. */
#include "gpio.h"
#include "ADC.h"
#include "uart0.h"
#include "GPTM.h"
#include "tm4c123gh6pm_registers.h"
/* HAL Includes*/
#include "RGB_LED.h"
#include "temp_sensor.h"
/* helper libraries*/
#include "string.h"
/***********************************************************************
 *                        DEFINITIONS                                  *
 ***********************************************************************/
#define NUMBER_OF_ITERATIONS_PER_ONE_MILI_SECOND 369
#define DRIVER_ID                                   0
#define PASSENGER_ID                                1
#define mainSW2_INTERRUPT_BIT                    (1<<0U)
#define mainSW1_INTERRUPT_BIT                    (1<<1U)
#define QUEUE_SIZE                                  3
#define mainDRIVER_SEAT_ERROR_RAISE_MASK         (1<<2U)
#define mainPASSENGER_SEAT_ERROR_RAISE_MASK      (1<<3U)
#define mainDRIVER_SEAT_ERROR_HANDLE_MASK        (1<<4U)
#define mainPASSENGER_SEAT_ERROR_HANDLE_MASK     (1<<5U)

/**************************ERROR CODES********************************/
#define DEC_Temp_BELOW_5                             0xAA
#define DEC_Temp_ABOVE_40                            0xBB
#define PEC_Temp_BELOW_5                             0xCC
#define PEC_Temp_ABOVE_40                            0xDD

/***********************************************************************
 *                       TYPE DEFINITIONS                              *
 ***********************************************************************/
typedef enum{
    OFF,LOW,MEDIUM,HIGH
}heatLevel_t;

typedef struct{
    TickType_t timestamp;
    heatLevel_t heatLevel;
    uint8 currentTemp;
}StateLog_t;

typedef struct {
    uint8 id;
    rgb_ledType* led;
    tempSensor_sensortype* tempSensor;
    uint16 setting_task_mask;
    uint16 error_reporting_mask;
    uint16 error_handling_mask;
    QueueHandle_t* read_to_ctrl_queue;
    QueueHandle_t* set_to_ctrl_queue;
    QueueHandle_t* ctrl_to_heat_queue;
    QueueHandle_t* set_to_state_queue;
    QueueSetHandle_t* set_read_to_ctrl_queue_set;
    StateLog_t* state;
}seat_t;

typedef struct {
    TickType_t xErrorTimeStamp;
    uint8 ucErrorDetails[50];
}ErrorLog_t;

typedef struct{
    uint8 desiredTemp;
    heatLevel_t workingState;
    uint8       currentTemp;
    boolean     errorFlag;
}DisplayData_t;
/***********************************************************************
 *                       GLOBAL VARIABLES                              *
 ***********************************************************************/

/***********************  RGB LEDs  **************************************/
rgb_ledType led = {GPIO_PORTD,{PIN0_ID,PIN1_ID,PIN2_ID}};
rgb_ledType led2 ={GPIO_PORTF , {PIN1_ID,PIN3_ID,PIN2_ID}};
/******************** Temperature Sensors *************************/
tempSensor_sensortype driverSeatSensor = {(ADC_ChannelType*)&ADC_channels[0]};
tempSensor_sensortype passengerSeatSensor = {(ADC_ChannelType*)&ADC_channels[1]};
/********************* Event Groups********************************/
EventGroupHandle_t xEventGroup;
/********************* Mutexes and Semaphors **********************/
SemaphoreHandle_t uart_protection_mutex;
SemaphoreHandle_t xDisplayDataMutex;
/**************************Queues********************************/
QueueHandle_t xReadToCtrlSeat1;
QueueHandle_t xReadToCtrlSeat2;
QueueHandle_t xSetToCtrlSeat1;
QueueHandle_t xSetToCtrlSeat2;
QueueHandle_t xCtrlToHeatSeat1;
QueueHandle_t xCtrlToHeatSeat2;
QueueHandle_t xCtrlToError;
QueueHandle_t xSetToStateSeat1;
QueueHandle_t xSetToStateSeat2;
QueueSetHandle_t set_read_to_ctrl_seat_1;
QueueSetHandle_t set_read_to_ctrl_seat_2;
/*************************Error log array*************************/
ErrorLog_t xErrorLogArray[10];
/*************************State Log*******************************/
StateLog_t xDriverStateLog;
StateLog_t xPassengerStateLog;
/************************Display Data****************************/
DisplayData_t xDriverDisplayData;
DisplayData_t xPassengerDisplayData;

/***************************Seats********************************/
seat_t driverSeat = {DRIVER_ID,
                     &led,
                     &driverSeatSensor,
                     mainSW1_INTERRUPT_BIT,
                     mainDRIVER_SEAT_ERROR_RAISE_MASK,
                     mainDRIVER_SEAT_ERROR_HANDLE_MASK,
                     &xReadToCtrlSeat1,
                     &xSetToCtrlSeat1,
                     &xCtrlToHeatSeat1,
                     &xSetToStateSeat1,
                     &set_read_to_ctrl_seat_1,
                     &xDriverStateLog
};

seat_t passengerSeat = {PASSENGER_ID,
                        &led2,
                        &passengerSeatSensor,
                        mainSW2_INTERRUPT_BIT,
                        mainPASSENGER_SEAT_ERROR_RAISE_MASK,
                        mainPASSENGER_SEAT_ERROR_HANDLE_MASK,
                        &xReadToCtrlSeat2,
                        &xSetToCtrlSeat2,
                        &xCtrlToHeatSeat2,
                        &xSetToStateSeat2,
                        &set_read_to_ctrl_seat_2,
                        &xPassengerStateLog
};
/************************RUNTIME MEASUREMENTS***************************/
uint32 ullTasksOutTime[16];
uint32 ullTasksInTime[16];
uint32 ullTasksTotalTime[16];
TaskHandle_t xTaskHandle1;
TaskHandle_t xTaskHandle2;
TaskHandle_t xTaskHandle3;
TaskHandle_t xTaskHandle4;
TaskHandle_t xTaskHandle5;
TaskHandle_t xTaskHandle6;
TaskHandle_t xTaskHandle7;
TaskHandle_t xTaskHandle8;
TaskHandle_t xTaskHandle9;
TaskHandle_t xTaskHandle10;
TaskHandle_t xTaskHandle11;
TaskHandle_t xTaskHandle12;
TaskHandle_t xTaskHandle13;
TaskHandle_t xTaskHandle14;
TaskHandle_t xTaskHandle15;
uint32 ullTaskBlockTime[10];
uint32 ullTaskUnBlockTime[10];
uint32 ullTotalTaskBlockTime[10];
uint32 ullTaskBlockOnQueueSet;
/***********************************************************************
 *                       FUNCTIONS DEFINITION                          *
 ***********************************************************************/

void Delay_MS(unsigned long long n)
{
    volatile unsigned long long count = 0;
    while(count++ < (NUMBER_OF_ITERATIONS_PER_ONE_MILI_SECOND * n) );
}
void Mcu_Init(void)
{
    /* Enable clock for All PORTs and wait for clock to start */
    SYSCTL_RCGCGPIO_REG |= 0x3F;
    while(!(SYSCTL_PRGPIO_REG & 0x3F));
}
void Heater_setTemp(rgb_ledType* led , heatLevel_t level)
{

    switch (level) {
    case OFF:
        rgb_greenLedOFF(led);
        rgb_blueLedOFF(led);
        break;
    case LOW:
        rgb_blueLedON(led);
        rgb_greenLedOFF(led);
        break;
    case MEDIUM:
        rgb_greenLedON(led);
        rgb_blueLedOFF(led);
        break;
    case HIGH:
        rgb_greenLedON(led);
        rgb_blueLedON(led);
        break;
    default:
        break;
    }
}
heatLevel_t getDesiredHeatLevel(uint8 currentTemp,uint8 desiredTemp)
{
    sint8 tempDif = desiredTemp - currentTemp ;
    if(tempDif >= 10)
    {
        return HIGH;
    }
    else if((tempDif<10) && (tempDif>=5))
    {
        return MEDIUM;
    }
    else if((tempDif>=2)&&(tempDif<5))
    {
        return LOW;

    }
    else if(tempDif<2)
    {
        return OFF;
    }
    else
    {
        return OFF;
    }
}

/*******************************************************************
 *                   FUNCTION DECLARATION
 *******************************************************************/
/* The HW setup function */
static void prvSetupHardware( void );

/* FreeRTOS tasks */
void vControlTask(void *pvParameters);
void vHeatingTask(void *pvParameters);
void vTemperatureReadingTask(void *pvParameters);
void vTemperatureSettingTask(void* pvParameters);
void vTempErrorWarningTask(void* pvParameters);
void vTempErrorReportingTask(void* pvParameters);
void vStateUpdateTask(void* pvParameters);
void vStateDisplayTask(void* pvParameters);
void vRunTimeMeasurementsTask(void *pvParameters);


/*******************************************************************
 *                       MAIN FUNCTION
 *******************************************************************/


int main(void)
{
    /* Setup the hardware for use with the Tiva C board. */
    prvSetupHardware();


    /* Create Tasks here */
    //    xTaskCreate(vControlTask, "Control Task For driver seat", 64, (void*)&driverSeat, 2, &xTaskHandle1);
    //    xTaskCreate(vHeatingTask, "Heater Task For Driver Seat", 64, (void*)&driverSeat, 2, &xTaskHandle2);
    //    xTaskCreate(vTemperatureReadingTask, "Temperature Reading Task for Driver Seat", 64, (void*)&driverSeat, 3, &xTaskHandle3);
    //    xTaskCreate(vTemperatureSettingTask, "Temperature setting task for Driver Seat", 64, (void*)&driverSeat, 4, &xTaskHandle4);
    //    xTaskCreate(vTempErrorWarningTask, "Temperature Error Warning Task for Driver Seat", 64, (void*)&driverSeat, 2, &xTaskHandle5);
    //    xTaskCreate(vTempErrorReportingTask, "Error Logging Task", 64, NULL, 3, &xTaskHandle6);
    //    xTaskCreate(vStateUpdateTask, "State update task for Driver Seat", 64, (void*)&driverSeat, 2, &xTaskHandle7);
    //    xTaskCreate(vStateUpdateTask, "State update task for Passenger Seat", 64, (void*)&passengerSeat, 2, &xTaskHandle8);
        xTaskCreate(vControlTask, "Control Task For Passenger seat", 64, (void*)&passengerSeat, 2, &xTaskHandle9);
//    xTaskCreate(vHeatingTask, "Heater Task For Passenger Seat", 64, (void*)&passengerSeat, 2, &xTaskHandle10);
    //    xTaskCreate(vTempErrorWarningTask, "Temperature Error Warning Task for Passenger Seat", 64, (void*)&passengerSeat, 2, &xTaskHandle11);
        xTaskCreate(vTemperatureSettingTask, "Temperature setting task for Passenger Seat", 64, (void*)&passengerSeat, 4, &xTaskHandle12);
    //    xTaskCreate(vTemperatureReadingTask, "Temperature Reading Task for Passenger Seat", 64, (void*)&passengerSeat, 3, &xTaskHandle13);
    //    xTaskCreate(vStateDisplayTask, "Display Task", 64, NULL, 3, &xTaskHandle14);
    xTaskCreate(vRunTimeMeasurementsTask, "RTM Task", 200, NULL, 5, &xTaskHandle15);
    vTaskSetApplicationTaskTag( xTaskHandle1, ( TaskHookFunction_t ) 1 );
    vTaskSetApplicationTaskTag( xTaskHandle2, ( TaskHookFunction_t ) 2 );
    vTaskSetApplicationTaskTag( xTaskHandle3, ( TaskHookFunction_t ) 3 );
    vTaskSetApplicationTaskTag( xTaskHandle4, ( TaskHookFunction_t ) 4 );
    vTaskSetApplicationTaskTag( xTaskHandle5, ( TaskHookFunction_t ) 5 );
    vTaskSetApplicationTaskTag( xTaskHandle6, ( TaskHookFunction_t ) 6 );
    vTaskSetApplicationTaskTag( xTaskHandle7, ( TaskHookFunction_t ) 7 );
    vTaskSetApplicationTaskTag( xTaskHandle8, ( TaskHookFunction_t ) 8 );
    vTaskSetApplicationTaskTag( xTaskHandle9, ( TaskHookFunction_t ) 9 );
    vTaskSetApplicationTaskTag( xTaskHandle10, ( TaskHookFunction_t ) 10 );
    vTaskSetApplicationTaskTag( xTaskHandle11, ( TaskHookFunction_t ) 11 );
    vTaskSetApplicationTaskTag( xTaskHandle12, ( TaskHookFunction_t ) 12 );
    vTaskSetApplicationTaskTag( xTaskHandle13, ( TaskHookFunction_t ) 13 );
    vTaskSetApplicationTaskTag( xTaskHandle14, ( TaskHookFunction_t ) 14 );
    vTaskSetApplicationTaskTag( xTaskHandle15, ( TaskHookFunction_t ) 15 );
    xEventGroup = xEventGroupCreate();
    uart_protection_mutex = xSemaphoreCreateMutex();
    xDisplayDataMutex = xSemaphoreCreateMutex();
    xReadToCtrlSeat1 = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
    xReadToCtrlSeat2 = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
    xSetToCtrlSeat1 = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
    xSetToCtrlSeat2 = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
    xCtrlToHeatSeat1 = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
    xCtrlToHeatSeat2 = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
    xCtrlToError = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
    xSetToStateSeat1 = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
    xSetToStateSeat2 = xQueueCreate(QUEUE_SIZE,sizeof(uint8));
//    vQueueAddToRegistry(xReadToCtrlSeat1, (char*)1);
    vQueueAddToRegistry(xReadToCtrlSeat2, (char*)2);
    vQueueAddToRegistry(xSetToCtrlSeat1, (char*)3);
    vQueueAddToRegistry(xSetToCtrlSeat2, (char*)4);
    vQueueAddToRegistry(xCtrlToHeatSeat1, (char*)5);
    vQueueAddToRegistry(xCtrlToHeatSeat2, (char*)6);
    vQueueAddToRegistry(xCtrlToError, (char*)7);
    vQueueAddToRegistry(xSetToStateSeat1, (char*)8);
    vQueueAddToRegistry(xSetToStateSeat2, (char*)9);
    set_read_to_ctrl_seat_1 = xQueueCreateSet(QUEUE_SIZE*2);
    set_read_to_ctrl_seat_2 = xQueueCreateSet(QUEUE_SIZE*2);
    vQueueAddToRegistry(set_read_to_ctrl_seat_2, (char*)1);

    xQueueAddToSet(xReadToCtrlSeat1, set_read_to_ctrl_seat_1);
    xQueueAddToSet(xSetToCtrlSeat1, set_read_to_ctrl_seat_1);
    xQueueAddToSet(xReadToCtrlSeat2, set_read_to_ctrl_seat_2);
    xQueueAddToSet(xSetToCtrlSeat2, set_read_to_ctrl_seat_2);

    /* Now all the tasks have been started - start the scheduler.*/


    vTaskStartScheduler();

    /* Should never reach here!  If you do then there was not enough heap
        available for the idle task to be created. */
    for (;;);

}


static void prvSetupHardware( void )
{
    /* Place here any needed HW initialization such as GPIO, UART, etc.  */
    Mcu_Init();
    rgb_init(&led);
    rgb_init(&led2);
    ADC0_init(driverSeat.tempSensor->adc_channel);
    ADC0_init(passengerSeat.tempSensor->adc_channel);
    GPIO_BuiltinButtonsLedsInit();
    GPIO_SW1EdgeTriggeredInterruptInit();
    GPIO_SW2EdgeTriggeredInterruptInit();
    UART0_Init();
    GPTM_WTimer0Init();
}

void vControlTask(void *pvParameters)
{
    seat_t* seat = (seat_t*)pvParameters;
    QueueHandle_t recQueue;
    QueueHandle_t sendQueue = *(seat->ctrl_to_heat_queue);
    uint8 temp;
    heatLevel_t recState=OFF;
    heatLevel_t sentState;
    uint8 desiredTemp;
    boolean xErrorFlag = FALSE;
    boolean xPrevError = FALSE;
    DisplayData_t* displayData;
    if(seat->id == DRIVER_ID)
    {
        displayData = &xDriverDisplayData;
    }
    else if(seat->id == PASSENGER_ID)
    {
        displayData = &xPassengerDisplayData;
    }
    else
    {

    }

    for (;;)
    {
        recQueue = xQueueSelectFromSet(*(seat->set_read_to_ctrl_queue_set), portMAX_DELAY);
        if(recQueue == *(seat->read_to_ctrl_queue))
        {
            xQueueReceive(recQueue, &temp, 0);
            displayData->currentTemp = temp;
            if(temp > 40 || temp < 5)
            {
                uint8 errorCode;
                xErrorFlag = TRUE;
                displayData->errorFlag = TRUE;
                if(seat->id == DRIVER_ID)
                {
                    if(temp<5)
                    {
                        errorCode = DEC_Temp_BELOW_5;
                        xQueueSend(xCtrlToError,&errorCode,0);
                    }
                    else if(temp>40)
                    {
                        errorCode = DEC_Temp_ABOVE_40;
                        xQueueSend(xCtrlToError,&errorCode,0);
                    }
                    else
                    {

                    }
                }
                else if(seat->id == PASSENGER_ID)
                {
                    if(temp<5)
                    {
                        errorCode = PEC_Temp_BELOW_5;
                        xQueueSend(xCtrlToError,&errorCode,0);
                    }
                    else if(temp>40)
                    {
                        errorCode = PEC_Temp_ABOVE_40;
                        xQueueSend(xCtrlToError,&errorCode,0);
                    }
                    else
                    {

                    }
                }
            }
            else
            {
                xErrorFlag = FALSE;
                displayData->errorFlag = FALSE;
            }
        }
        else if(recQueue == *(seat->set_to_ctrl_queue))
        {
            xQueueReceive(recQueue, &recState, 0);
            switch (recState) {
            case LOW:
                desiredTemp = 25;
                break;
            case MEDIUM:
                desiredTemp = 30;
                break;
            case HIGH:
                desiredTemp = 35;
                break;
            default:
                desiredTemp = 0;
                break;
            }
            displayData->desiredTemp = desiredTemp;

        }
        if(xErrorFlag == TRUE)
        {
            sentState = OFF;
            xPrevError = TRUE;
            xEventGroupSetBits(xEventGroup, seat->error_reporting_mask);
        }
        else if(xErrorFlag == FALSE)
        {
            if(xPrevError == TRUE)
            {
                xPrevError = FALSE;
                xEventGroupSetBits(xEventGroup, seat->error_handling_mask);
            }
            else
            {

            }
            if(recState == OFF)
            {
                sentState = OFF;
            }
            else
            {
                sentState = getDesiredHeatLevel(temp, desiredTemp);
            }
        }
        else
        {

        }
        displayData->workingState = sentState;
        xQueueSend(sendQueue,&sentState,0);

    }
}

void vHeatingTask(void *pvParameters)
{
    seat_t* seat = (seat_t*)pvParameters;
    QueueHandle_t recQueue=*(seat->ctrl_to_heat_queue);
    heatLevel_t state ;
    for (;;)
    {
        xQueueReceive(recQueue, &state, portMAX_DELAY);
        Heater_setTemp(seat->led, state);

    }
}

void vTemperatureReadingTask(void *pvParameters)
{
    seat_t* seat = (seat_t*)pvParameters;
    uint16 data;
    QueueHandle_t read_to_ctrl = *(seat->read_to_ctrl_queue);
    TickType_t xLastWakeTime = xTaskGetTickCount();
    for(;;)
    {
        vTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(50));
        data = tempSensor_readTemp(seat->tempSensor);
        //        xSemaphoreTake(uart_protection_mutex,portMAX_DELAY);
        //        UART0_SendString("current temp is : ");
        //        UART0_SendInteger(data);
        //        UART0_SendString("\r\n");
        //        xSemaphoreGive(uart_protection_mutex);
        xQueueSend(read_to_ctrl,&data,0);
    }
}
void vTemperatureSettingTask(void* pvParameters)
{
    seat_t* seat = (seat_t*)pvParameters;
    EventBits_t eventbits;
    uint8 state = OFF;
    QueueHandle_t sendToCtrlQueue = *(seat->set_to_ctrl_queue);
    QueueHandle_t sendToSetQueue = *(seat->set_to_state_queue);
    for(;;)
    {
        eventbits = xEventGroupWaitBits(xEventGroup, seat->setting_task_mask, pdTRUE, pdFALSE, portMAX_DELAY);

        if(eventbits & seat->setting_task_mask)
        {
            state = (state + 1) % 4;
            xQueueSend(sendToCtrlQueue,&state,0);
            xQueueSend(sendToSetQueue,&state,0);
        }



    }
}

void vTempErrorReportingTask(void* pvParameters)
{
    uint8 counter=0;
    TickType_t timeStamp;
    uint8 errorCode ;
    for(;;)
    {

        xQueueReceive(xCtrlToError, &errorCode, portMAX_DELAY);
        timeStamp = GPTM_WTimer0Read();
        switch (errorCode) {
        case DEC_Temp_BELOW_5:
            strcpy((char*)xErrorLogArray[counter].ucErrorDetails, "Driver Seat Temperature Fell Below 5 Degrees");
            break;
        case DEC_Temp_ABOVE_40:
            strcpy((char*)xErrorLogArray[counter].ucErrorDetails, "Driver Seat Temperature Risen Above 40 Degrees");
            break;
        case PEC_Temp_BELOW_5:
            strcpy((char*)xErrorLogArray[counter].ucErrorDetails, "Passenger Seat Temperature Fell Below 5 Degrees");
            break;
        case PEC_Temp_ABOVE_40:
            strcpy((char*)xErrorLogArray[counter].ucErrorDetails, "Passenger Seat Temperature Risen above 40 Degrees");
            break;
        default:
            break;
        }
        xErrorLogArray[counter].xErrorTimeStamp = timeStamp;
        counter = (counter + 1) % 10;

    }
}

void vTempErrorWarningTask(void* pvParameters)
{
    seat_t* seat = (seat_t*)pvParameters;
    uint16 RaisErrorMask = seat->error_reporting_mask;
    uint16 ErrorHandledMask = seat->error_handling_mask;
    rgb_ledType* xErrorLed = seat->led;
    EventBits_t xEventBits;
    for(;;)
    {
        xEventBits = xEventGroupWaitBits(xEventGroup, RaisErrorMask|ErrorHandledMask, pdTRUE, pdFALSE, portMAX_DELAY);
        if(xEventBits & RaisErrorMask)
        {
            rgb_redLedON(xErrorLed);
        }
        else if(xEventBits & ErrorHandledMask)
        {
            rgb_redLedOFF(xErrorLed);
        }
        else
        {

        }
    }
}

void vStateUpdateTask(void* pvParameters)
{
    seat_t* seat = (seat_t*)pvParameters;
    QueueHandle_t recQueue = *(seat->set_to_state_queue);
    TickType_t timestamp;
    heatLevel_t state ;
    StateLog_t* stateLog = seat->state;

    for(;;)
    {
        xQueueReceive(recQueue, &state, portMAX_DELAY);
        timestamp = GPTM_WTimer0Read();
        stateLog->heatLevel = state;
        stateLog->timestamp = timestamp;
        //                xSemaphoreTake(uart_protection_mutex,portMAX_DELAY);
        //                UART0_SendString("State: ");
        //                UART0_SendInteger(seat->state->heatLevel);
        //                UART0_SendString(" , was set for seat:  ");
        //                UART0_SendInteger(seat->id+1);
        //                UART0_SendString("at time : ");
        //                UART0_SendInteger(seat->state->timestamp);
        //                UART0_SendString("\r\n");
        //                xSemaphoreGive(uart_protection_mutex);
    }
}


void vStateDisplayTask(void* pvParameters)
{
    uint8 counter ;
    TickType_t xLastWakeTime = xTaskGetTickCount();

    for(;;)
    {
        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(500));
        DisplayData_t displaydata[2] = {xDriverDisplayData,xPassengerDisplayData};
        for(counter=0;counter<2;counter++)
        {
            if(0 == counter)
                UART0_SendString("Driver:\r\n");
            else if(1 == counter)
                UART0_SendString("Passenger:\r\n");

            UART0_SendString("seat current Temperature = ");
            UART0_SendInteger(displaydata[counter].currentTemp);
            UART0_SendString("\r\nDesired Temperature = ");
            UART0_SendInteger(displaydata[counter].desiredTemp);
            if(displaydata[counter].errorFlag == TRUE)
            {
                UART0_SendString("\r\nHeater is Turned OFF due to error; Temperature is out of correct range\r\n");
            }
            else
            {
                if(displaydata[counter].workingState == OFF)
                {
                    UART0_SendString("\r\nHeater is Turned OFF\r\n");
                }
                else
                {
                    UART0_SendString("\r\n Heater is Working with ");
                    switch (displaydata[counter].workingState) {
                    case LOW:
                        UART0_SendString("LOW");
                        break;
                    case MEDIUM:
                        UART0_SendString("MEDIUM");
                        break;
                    case HIGH:
                        UART0_SendString("HIGH");
                        break;
                    default:
                        break;
                    }
                    UART0_SendString(" Intensity\r\n");
                }
            }
            UART0_SendString("/*-----------------------------------------------------------------------------------*/\r\n");
        }
    }
}

void vRunTimeMeasurementsTask(void *pvParameters)
{
    TickType_t xLastWakeTime = xTaskGetTickCount();
    for (;;)
    {
        uint8 ucCounter;
        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(5000));
                for(ucCounter = 1 ; ucCounter<10 ; ucCounter++)
                {

                    taskENTER_CRITICAL();
                    UART0_SendString("block time for queue ");
                    UART0_SendInteger(ucCounter);
                    UART0_SendString(" is : ");
                    UART0_SendInteger(ullTaskBlockTime[ucCounter] / 10);
                    UART0_SendString(" \r\n");
                }

        UART0_SendString("|****************************************************|\r\n");
        taskEXIT_CRITICAL();

    }

}

/*-----------------------------ISRS---------------------------------------*/

void GPIO_portfHandler(void)
{
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    if(GPIO_PORTF_RIS_REG & (1<<0))           /* PF0 handler code */
    {
        xEventGroupSetBitsFromISR(xEventGroup, mainSW2_INTERRUPT_BIT,&xHigherPriorityTaskWoken);
        GPIO_PORTF_ICR_REG   |= (1<<0);       /* Clear Trigger flag for PF0 (Interrupt Flag) */
    }
    else if(GPIO_PORTF_RIS_REG & (1<<4))      /* PF4 handler code */
    {
        xEventGroupSetBitsFromISR(xEventGroup, mainSW1_INTERRUPT_BIT,&xHigherPriorityTaskWoken);
        GPIO_PORTF_ICR_REG   |= (1<<4);       /* Clear Trigger flag for PF4 (Interrupt Flag) */
    }

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}
